[gd_resource type="VisualShader" load_steps=13 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=9]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=11]

[sub_resource type="VisualShaderNodeTexture" id=1]
texture = ExtResource( 1 )
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id=2]
output_port_for_preview = 0
input_name = "uv2"

[sub_resource type="VisualShaderNodeVectorFunc" id=3]
output_port_for_preview = 0
function = 4

[sub_resource type="VisualShaderNodeVectorFunc" id=4]
output_port_for_preview = 0
function = 5

[sub_resource type="VisualShaderNodeVectorDecompose" id=5]

[sub_resource type="VisualShaderNodeVectorCompose" id=6]

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "time"

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;

uniform sampler2D tex_frg_2 : hint_albedo;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV2, 0.0);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out3p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// VectorFunc:4
	vec3 n_out4p0;
	{
		vec3 c = n_out2p0;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		n_out4p0 = vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

// VectorDecompose:6
	float n_out6p0 = n_out4p0.x;
	float n_out6p1 = n_out4p0.y;
	float n_out6p2 = n_out4p0.z;

// Input:9
	float n_out9p0 = TIME;

// ScalarOp:8
	float n_out8p0 = n_out6p0 + n_out9p0;

// Input:11
	vec3 n_out11p0 = vec3(SCREEN_UV, 0.0);

// VectorDecompose:12
	float n_out12p0 = n_out11p0.x;
	float n_out12p1 = n_out11p0.y;
	float n_out12p2 = n_out11p0.z;

// ScalarOp:10
	float n_out10p0 = n_out6p1 * n_out12p0;

// VectorCompose:7
	vec3 n_out7p0 = vec3(n_out8p0, n_out10p0, n_out6p2);

// VectorFunc:5
	vec3 n_out5p0;
	{
		vec3 c = n_out7p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out5p0 = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// Output:0
	ALBEDO = n_out5p0;
	ALPHA = n_out2p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -530.074, 67.2773 )
nodes/fragment/0/position = Vector2( 580, 280 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -620, 420 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -1020, 540 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -340, 460 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 220, 420 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( -360, 640 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( 60, 620 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( -120, 560 )
nodes/fragment/9/node = SubResource( 8 )
nodes/fragment/9/position = Vector2( -140, 280 )
nodes/fragment/10/node = SubResource( 9 )
nodes/fragment/10/position = Vector2( -120, 660 )
nodes/fragment/11/node = SubResource( 10 )
nodes/fragment/11/position = Vector2( -640, 780 )
nodes/fragment/12/node = SubResource( 11 )
nodes/fragment/12/position = Vector2( -340, 860 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 2, 0, 4, 0, 4, 0, 6, 0, 7, 0, 5, 0, 6, 2, 7, 2, 6, 0, 8, 0, 9, 0, 8, 1, 6, 1, 10, 0, 11, 0, 12, 0, 12, 0, 10, 1, 5, 0, 0, 0, 10, 0, 7, 1, 8, 0, 7, 0, 2, 1, 0, 1 )
