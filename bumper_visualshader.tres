[gd_resource type="VisualShader" load_steps=21 format=2]

[sub_resource type="VisualShaderNodeVectorCompose" id=3]

[sub_resource type="VisualShaderNodeScalarOp" id=4]

[sub_resource type="VisualShaderNodeVectorDistance" id=5]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0 ) ]

[sub_resource type="VisualShaderNodeScalarOp" id=6]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=7]
output_port_for_preview = 0
default_input_values = [ 0, 0.7, 1, 1.0, 2, 0.1 ]

[sub_resource type="VisualShaderNodeVectorOp" id=8]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 0.5, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=9]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.25, 0.5, 0 ) ]

[sub_resource type="VisualShaderNodeScalarOp" id=10]
output_port_for_preview = 0
default_input_values = [ 0, 2.0, 1, 0.0 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorDecompose" id=11]

[sub_resource type="VisualShaderNodeVectorCompose" id=12]

[sub_resource type="VisualShaderNodeScalarOp" id=13]
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=14]
default_input_values = [ 0, 0.25, 1, 0.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=15]
default_input_values = [ 0, -0.25, 1, 0.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=22]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=16]
output_port_for_preview = 0
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id=17]
source = 5

[sub_resource type="VisualShaderNodeVectorFunc" id=19]
function = 4

[sub_resource type="VisualShaderNodeVectorFunc" id=20]
function = 5

[sub_resource type="VisualShaderNodeVectorDecompose" id=21]

[resource]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Input:4

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, n_out3p0.xy);
		n_out5p0 = TEXTURE_tex_read.rgb;
		n_out5p1 = TEXTURE_tex_read.a;
	}

// VectorFunc:7
	vec3 n_out7p0;
	{
		vec3 c = n_out5p0;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		n_out7p0 = vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

// VectorDecompose:9
	float n_out9p0 = n_out7p0.x;
	float n_out9p1 = n_out7p0.y;
	float n_out9p2 = n_out7p0.z;

// ScalarOp:22
	float n_in22p0 = -0.25000;
	float n_in22p1 = 0.00000;
	float n_out22p0 = n_in22p0 + n_in22p1;

// VectorDecompose:18
	float n_out18p0 = n_out3p0.x;
	float n_out18p1 = n_out3p0.y;
	float n_out18p2 = n_out3p0.z;

// ScalarOp:21
	float n_out21p0 = n_out22p0 + n_out18p0;

// ScalarOp:20
	float n_in20p1 = 0.50000;
	float n_out20p0 = n_out18p1 + n_in20p1;

// VectorCompose:19
	float n_in19p2 = 0.00000;
	vec3 n_out19p0 = vec3(n_out21p0, n_out20p0, n_in19p2);

// VectorOp:15
	vec3 n_in15p1 = vec3(1.00000, 0.50000, 0.00000);
	vec3 n_out15p0 = n_out19p0 * n_in15p1;

// Distance:12
	vec3 n_in12p1 = vec3(0.50000, 0.50000, 0.00000);
	float n_out12p0 = distance(n_out15p0, n_in12p1);

// ScalarOp:13
	float n_in13p0 = 1.00000;
	float n_out13p0 = n_in13p0 - n_out12p0;

// ScalarSmoothStep:14
	float n_in14p0 = 0.70000;
	float n_in14p1 = 1.00000;
	float n_out14p0 = smoothstep(n_in14p0, n_in14p1, n_out13p0);

// ScalarOp:17
	float n_in17p0 = 2.00000;
	float n_out17p0 = n_in17p0 * n_out14p0;

// ScalarOp:23
	float n_out23p0 = n_out17p0 * n_out9p2;

// ScalarOp:11
	float n_out11p0 = n_out23p0 + n_out9p2;

// VectorCompose:10
	vec3 n_out10p0 = vec3(n_out9p0, n_out9p1, n_out11p0);

// VectorFunc:8
	vec3 n_out8p0;
	{
		vec3 c = n_out10p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out8p0 = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// Output:0
	COLOR.rgb = n_out8p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -547.237, -498.106 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 740, 160 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -1320, 0 )
nodes/fragment/4/node = SubResource( 16 )
nodes/fragment/4/position = Vector2( -760, 180 )
nodes/fragment/5/node = SubResource( 17 )
nodes/fragment/5/position = Vector2( -380, 80 )
nodes/fragment/7/node = SubResource( 19 )
nodes/fragment/7/position = Vector2( -60, 40 )
nodes/fragment/8/node = SubResource( 20 )
nodes/fragment/8/position = Vector2( 520, 40 )
nodes/fragment/9/node = SubResource( 21 )
nodes/fragment/9/position = Vector2( -60, 100 )
nodes/fragment/10/node = SubResource( 3 )
nodes/fragment/10/position = Vector2( 520, 100 )
nodes/fragment/11/node = SubResource( 4 )
nodes/fragment/11/position = Vector2( 520, -220 )
nodes/fragment/12/node = SubResource( 5 )
nodes/fragment/12/position = Vector2( -400, -200 )
nodes/fragment/13/node = SubResource( 6 )
nodes/fragment/13/position = Vector2( -240, -220 )
nodes/fragment/14/node = SubResource( 7 )
nodes/fragment/14/position = Vector2( -60, -260 )
nodes/fragment/15/node = SubResource( 8 )
nodes/fragment/15/position = Vector2( -600, -180 )
nodes/fragment/16/node = SubResource( 9 )
nodes/fragment/16/position = Vector2( -980, 60 )
nodes/fragment/17/node = SubResource( 10 )
nodes/fragment/17/position = Vector2( 180, -400 )
nodes/fragment/18/node = SubResource( 11 )
nodes/fragment/18/position = Vector2( -1340, -120 )
nodes/fragment/19/node = SubResource( 12 )
nodes/fragment/19/position = Vector2( -820, -160 )
nodes/fragment/20/node = SubResource( 13 )
nodes/fragment/20/position = Vector2( -1000, -80 )
nodes/fragment/21/node = SubResource( 14 )
nodes/fragment/21/position = Vector2( -960, -200 )
nodes/fragment/22/node = SubResource( 15 )
nodes/fragment/22/position = Vector2( -1380, -300 )
nodes/fragment/23/node = SubResource( 22 )
nodes/fragment/23/position = Vector2( 360, -320 )
nodes/fragment/connections = PoolIntArray( 3, 0, 5, 0, 5, 1, 0, 1, 5, 0, 7, 0, 8, 0, 0, 0, 7, 0, 9, 0, 9, 0, 10, 0, 10, 0, 8, 0, 9, 1, 10, 1, 11, 0, 10, 2, 9, 2, 11, 1, 12, 0, 13, 1, 13, 0, 14, 2, 3, 0, 16, 0, 4, 0, 5, 2, 14, 0, 17, 1, 15, 0, 12, 0, 3, 0, 18, 0, 18, 1, 20, 0, 20, 0, 19, 1, 18, 0, 21, 1, 21, 0, 19, 0, 22, 0, 21, 0, 19, 0, 15, 0, 17, 0, 23, 0, 9, 2, 23, 1, 23, 0, 11, 0 )
