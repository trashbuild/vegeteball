[gd_resource type="VisualShader" load_steps=37 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=9]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=11]

[sub_resource type="VisualShaderNodeTextureUniform" id=12]
uniform_name = "TextureUniform"
color_default = 1

[sub_resource type="VisualShaderNodeInput" id=13]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarOp" id=14]

[sub_resource type="VisualShaderNodeScalarFunc" id=15]
function = 0

[sub_resource type="VisualShaderNodeVectorDecompose" id=16]

[sub_resource type="VisualShaderNodeVectorCompose" id=17]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=18]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=19]
constant = 0.5

[sub_resource type="VisualShaderNodeScalarOp" id=20]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=21]
operator = 1

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=22]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.3, 2, 1.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=23]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=24]
output_port_for_preview = 0
default_input_values = [ 0, 0.4, 1, 0.2, 2, 0.6 ]

[sub_resource type="VisualShaderNodeScalarOp" id=25]
default_input_values = [ 0, 1.0, 1, 0.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=26]
default_input_values = [ 0, 0.0, 1, -0.25 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=27]

[sub_resource type="VisualShaderNodeInput" id=2]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=28]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=29]
output_port_for_preview = 0
function = 0

[sub_resource type="VisualShaderNodeScalarFunc" id=30]
function = 17

[sub_resource type="VisualShaderNodeScalarOp" id=31]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=32]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=33]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorFunc" id=3]
function = 4

[sub_resource type="VisualShaderNodeVectorFunc" id=4]
output_port_for_preview = 0
function = 5

[sub_resource type="VisualShaderNodeVectorDecompose" id=5]

[sub_resource type="VisualShaderNodeVectorCompose" id=6]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "time"

[sub_resource type="VisualShaderNodeInput" id=34]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id=35]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=36]
input_name = "color"

[sub_resource type="VisualShaderNodeInput" id=37]
input_name = "alpha"

[resource]
code = "shader_type canvas_item;
uniform sampler2D TextureUniform : hint_black;



void vertex() {
// Input:2
	vec3 n_out2p0 = vec3(VERTEX, 0.0);

// Input:3
	vec3 n_out3p0 = vec3(UV,0.0);

// Input:4
	vec3 n_out4p0 = COLOR.rgb;

// Input:5
	float n_out5p0 = COLOR.a;

// Output:0
	VERTEX = n_out2p0.xy;
	UV = n_out3p0.xy;
	COLOR.rgb = n_out4p0;
	COLOR.a = n_out5p0;

}

void fragment() {
// Scalar:21
	float n_out21p0 = 0.500000;

// Input:15
	vec3 n_out15p0 = vec3(UV, 0.0);

// VectorDecompose:18
	float n_out18p0 = n_out15p0.x;
	float n_out18p1 = n_out15p0.y;
	float n_out18p2 = n_out15p0.z;

// ScalarOp:23
	float n_out23p0 = n_out21p0 - n_out18p0;

// Input:30
	float n_out30p0 = TIME;

// ScalarOp:36
	float n_in36p1 = 0.50000;
	float n_out36p0 = n_out30p0 * n_in36p1;

// ScalarFunc:33
	float n_out33p0 = fract(n_out36p0);

// ScalarFunc:32
	float n_out32p0 = sin(n_out33p0);

// ScalarOp:35
	float n_in35p1 = 2.00000;
	float n_out35p0 = n_out32p0 * n_in35p1;

// ScalarOp:34
	float n_in34p1 = 1.00000;
	float n_out34p0 = n_out35p0 - n_in34p1;

// ScalarOp:29
	float n_out29p0 = n_out18p1 + n_out34p0;

// ScalarSmoothStep:24
	float n_in24p0 = 0.00000;
	float n_in24p1 = 0.30000;
	float n_out24p0 = smoothstep(n_in24p0, n_in24p1, n_out29p0);

// ScalarSmoothStep:26
	float n_in26p0 = 0.40000;
	float n_in26p1 = 0.20000;
	float n_out26p0 = smoothstep(n_in26p0, n_in26p1, n_out29p0);

// ScalarOp:25
	float n_out25p0 = n_out24p0 * n_out26p0;

// ScalarOp:28
	float n_in28p1 = -0.25000;
	float n_out28p0 = n_out25p0 * n_in28p1;

// ScalarOp:27
	float n_in27p0 = 1.00000;
	float n_out27p0 = n_in27p0 + n_out28p0;

// ScalarOp:20
	float n_out20p0 = n_out23p0 * n_out27p0;

// ScalarOp:22
	float n_out22p0 = n_out20p0 + n_out21p0;

// VectorCompose:19
	float n_in19p2 = 0.00000;
	vec3 n_out19p0 = vec3(n_out22p0, n_out18p1, n_in19p2);

// TextureUniform:14
	vec3 n_out14p0;
	float n_out14p1;
	{
		vec4 n_tex_read = texture(TextureUniform, n_out19p0.xy);
		n_out14p0 = n_tex_read.rgb;
		n_out14p1 = n_tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out14p0;
	COLOR.a = n_out14p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1461.94, -39.598 )
mode = 1
flags/light_only = false
nodes/vertex/0/position = Vector2( 440, 160 )
nodes/vertex/2/node = SubResource( 34 )
nodes/vertex/2/position = Vector2( 200, 120 )
nodes/vertex/3/node = SubResource( 35 )
nodes/vertex/3/position = Vector2( 220, 180 )
nodes/vertex/4/node = SubResource( 36 )
nodes/vertex/4/position = Vector2( 160, 240 )
nodes/vertex/5/node = SubResource( 37 )
nodes/vertex/5/position = Vector2( 180, 340 )
nodes/vertex/connections = PoolIntArray( 2, 0, 0, 0, 3, 0, 0, 1, 4, 0, 0, 2, 5, 0, 0, 3 )
nodes/fragment/0/position = Vector2( 580, 260 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -960, 580 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -640, 520 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 260, 420 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( -640, 580 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( 80, 580 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( -140, 500 )
nodes/fragment/9/node = SubResource( 8 )
nodes/fragment/9/position = Vector2( -440, 420 )
nodes/fragment/10/node = SubResource( 9 )
nodes/fragment/10/position = Vector2( -100, 700 )
nodes/fragment/11/node = SubResource( 10 )
nodes/fragment/11/position = Vector2( -940, 840 )
nodes/fragment/12/node = SubResource( 11 )
nodes/fragment/12/position = Vector2( -800, 840 )
nodes/fragment/14/node = SubResource( 12 )
nodes/fragment/14/position = Vector2( -460, 160 )
nodes/fragment/15/node = SubResource( 13 )
nodes/fragment/15/position = Vector2( -1740, 60 )
nodes/fragment/16/node = SubResource( 14 )
nodes/fragment/16/position = Vector2( -320, 840 )
nodes/fragment/17/node = SubResource( 15 )
nodes/fragment/17/position = Vector2( -440, 480 )
nodes/fragment/18/node = SubResource( 16 )
nodes/fragment/18/position = Vector2( -1580, 60 )
nodes/fragment/19/node = SubResource( 17 )
nodes/fragment/19/position = Vector2( -660, 40 )
nodes/fragment/20/node = SubResource( 18 )
nodes/fragment/20/position = Vector2( -940, -180 )
nodes/fragment/21/node = SubResource( 19 )
nodes/fragment/21/position = Vector2( -1580, -260 )
nodes/fragment/22/node = SubResource( 20 )
nodes/fragment/22/position = Vector2( -740, -220 )
nodes/fragment/23/node = SubResource( 21 )
nodes/fragment/23/position = Vector2( -1420, -200 )
nodes/fragment/24/node = SubResource( 22 )
nodes/fragment/24/position = Vector2( -1300, 140 )
nodes/fragment/25/node = SubResource( 23 )
nodes/fragment/25/position = Vector2( -1100, 180 )
nodes/fragment/26/node = SubResource( 24 )
nodes/fragment/26/position = Vector2( -1300, 360 )
nodes/fragment/27/node = SubResource( 25 )
nodes/fragment/27/position = Vector2( -1220, -80 )
nodes/fragment/28/node = SubResource( 26 )
nodes/fragment/28/position = Vector2( -920, 100 )
nodes/fragment/29/node = SubResource( 27 )
nodes/fragment/29/position = Vector2( -1560, 200 )
nodes/fragment/30/node = SubResource( 28 )
nodes/fragment/30/position = Vector2( -2280, 100 )
nodes/fragment/32/node = SubResource( 29 )
nodes/fragment/32/position = Vector2( -2060, 380 )
nodes/fragment/33/node = SubResource( 30 )
nodes/fragment/33/position = Vector2( -2240, 360 )
nodes/fragment/34/node = SubResource( 31 )
nodes/fragment/34/position = Vector2( -1900, 160 )
nodes/fragment/35/node = SubResource( 32 )
nodes/fragment/35/position = Vector2( -1840, 420 )
nodes/fragment/36/node = SubResource( 33 )
nodes/fragment/36/position = Vector2( -2440, 260 )
nodes/fragment/connections = PoolIntArray( 7, 0, 5, 0, 6, 0, 8, 0, 8, 0, 7, 0, 14, 0, 4, 0, 14, 1, 0, 1, 11, 0, 12, 0, 6, 2, 10, 0, 6, 1, 7, 1, 10, 0, 7, 2, 16, 0, 10, 1, 9, 0, 17, 0, 17, 0, 8, 1, 17, 0, 16, 0, 12, 1, 16, 1, 4, 0, 6, 0, 14, 0, 0, 0, 15, 0, 18, 0, 18, 1, 19, 1, 19, 0, 14, 0, 20, 0, 22, 0, 22, 0, 19, 0, 21, 0, 23, 0, 18, 0, 23, 1, 21, 0, 22, 1, 24, 0, 25, 0, 26, 0, 25, 1, 23, 0, 20, 0, 25, 0, 28, 0, 28, 0, 27, 1, 27, 0, 20, 1, 18, 1, 29, 0, 29, 0, 24, 2, 29, 0, 26, 2, 33, 0, 32, 0, 34, 0, 29, 1, 32, 0, 35, 0, 35, 0, 34, 0, 30, 0, 36, 0, 36, 0, 33, 0 )
